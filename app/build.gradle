apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: com.example.buildsrc.MyPlugin
apply plugin: 'myplugin'
apply plugin: 'kotlin-kapt'

static def getTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
    }

    //签名配置
    signingConfigs {
        debug {
            // No debug config
            storeFile file("${rootDir}/xqsg_debug.jks") //debug证书
            storePassword "123456"                            //签名证书密码
            keyAlias "key0"                                 //别名
            keyPassword "123456"                              //别名密码
        }

        release {
            storeFile file("${rootDir}/xqsg.jks") //release证书
            storePassword "123456"                            //签名证书密码
            keyAlias "key0"                                 //别名
            keyPassword "123456"                              //别名密码
        }
    }

    buildTypes {
        debuge {
            buildConfigField("boolean", "LOG_ON", "true")//通过编译类型配置日志开关
            versionNameSuffix "-debug"                       //包名后缀为“-debug”

            minifyEnabled false                              //是否混淆
            zipAlignEnabled false                            //Zipalign优化
            shrinkResources false                            // 移除无用的resource文件
            signingConfig signingConfigs.debug               //使用debug证书签名,signingConfigs要放到buildTypes之前否则会报错
        }
        release {
            buildConfigField "boolean", "LOG_ON", "false" //不显示Log

            minifyEnabled true                               //开启混淆
            zipAlignEnabled true                             //开启Zipalign优化
            shrinkResources true                             //移除无用的resource文件，此项只有在开启混淆时才生效
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release             //使用release证书签名,signingConfigs要放到buildTypes之前否则会报错

            android.applicationVariants.all { variant -> //重命名生成的apk
                variant.outputs.all { output ->
                    def buildName = "Downloader"
                    def type = variant.buildType.name
                    def apkName = buildName + '_' + type + "_" + versionName + '_' + getTime() + '.apk'
                    outputFileName = apkName
                }
            }
        }
    }

    productFlavors {
        red {
            dimension "versionCode"
            applicationId "com.example.myapplication.red"
            versionCode 3
        }

        blue {
            dimension "versionCode"
            applicationId "com.example.myapplication.blue"
            versionCode 4
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "io.reactivex.rxjava2:rxjava:$rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid"

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'

    def lifecycle_version = "1.1.1"

    // ViewModel and LiveData
    api "android.arch.lifecycle:extensions:$lifecycle_version"
    // alternatively - just ViewModel
    api "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    api "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    // Support library depends on this lightweight import
    api "android.arch.lifecycle:runtime:$lifecycle_version"

    kapt "android.arch.lifecycle:compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of compiler
    api "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    api "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    // compile "android.arch.core:core-testing:$lifecycle_version"
    api 'com.facebook.stetho:stetho:1.3.1'

    //  room
    api 'android.arch.persistence.room:runtime:1.1.0'
    kapt 'android.arch.persistence.room:compiler:1.1.0'
    api "android.arch.persistence.room:rxjava2:1.1.0"


}

ext {
    local = 'hello'
}

task printProperties << {
    println local
    println propertiesFile
    if (project.hasProperty("cmd")) {
        println cmd
    }
}

//tasks.create(name: 'hello') << {
//    println 'hello,world!'
//}

//task(hello) << {
//    println 'hello,world!'
//}
//
//task('hello') << {
//    println 'hello,world!'
//}

task hello {
    println 'configure'
    doFirst {
        println 'init--first'
    }

    doLast {
        println 'clos--last'
    }
}

task task1 << {
    println 'task1 init'
}

task task2 << {
    println 'task2 init'
}

//task2.mustRunAfter task1
task2.dependsOn task1

tasks.whenTaskAdded {
    theTask ->
        if (theTask.name == "packageRelease") {
            theTask.dependsOn "task1"
        }
}

myExtension {
    extensionName "ddd"
    innerExtension {
        extensionName "innerExtension"
    }
}


ext {
    someValue = "somvalue"
    myProp = "myvalue"
}

task taskTest << {
    assert project.myProp == "myvalue"
    println project.someValue
    ext.someValue = "somevalue"
    println ext.someValue
}

ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
    println project.version
}

ProjectVersion readVersion() {

    if (!versionFile.exists()) {
        throw new GradleException("require versionfile not exists")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.realease.toBoolean())
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean realease

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.realease = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean realease) {
        this(major, minor)
        this.realease = realease
    }

    @Override
    String toString() {
        return "$major.$minor.$realease"
    }
}
